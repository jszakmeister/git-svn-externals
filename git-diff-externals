#!/usr/bin/env python
import os
import sys
import re
from subprocess import Popen, PIPE


class ScriptError(Exception):
    pass


show_commands = True


def get_top_level():
    try:
        return run('git', 'rev-parse', '--show-toplevel')[0]
    except ScriptError:
        pass

    return None


def create_args(*args):
    return ' '.join(('"' + x + '"') for x in args)


def run(*args, **kwargs):
    env = kwargs.get('env', None)
    cmd = create_args(*args)
    if env is None:
        env = os.environ.copy()
    if show_commands:
        print "cmd: %s (%s)" % (cmd, os.getcwd())
    popen = Popen(cmd, shell=True, stdout=PIPE, env=env)
    pipe = popen.stdout
    output = pipe.read().rstrip()
    retcode = pipe.wait()
    if retcode != 0:
        raise ScriptError("Command failed to execute: '%s'" % (cmd,))
    return (output and output.split('\n')) or []


def run_git(path, *args):
    git_dir = os.path.join(path, '.git')
    return run('git', '--git-dir=%s' % git_dir,
               '--work-tree=%s' % path, *args)


def get_externals(path):
    external_path = os.path.join(path, '.git', '.externals')
    if not os.path.exists(external_path):
        return set([])

    with open(external_path, 'rb') as f:
        externals = f.read().splitlines()

    return set(externals)


def compute_rel(cwd, path):
    cwd = cwd.split('/')
    path = path.split('/')

    while True:
        if len(path) == 0 or len(cwd) == 0:
            break

        if cwd[0] != path[0]:
            break

        del cwd[0]
        del path[0]

    return os.path.join('/'.join(['..'] * len(cwd)), '/'.join(path))


top_level = get_top_level()
if top_level is None:
    sys.exit(1)

cwd = os.getcwd()

branches = set([top_level])
branches.update([os.path.join(top_level, x) for x in get_externals(top_level)])
branches.remove(top_level)
branches = [top_level] + sorted(branches)


paths = [os.path.abspath(x) for x in sys.argv[1:] if not x.startswith('-')]
options = [x for x in sys.argv[1:] if x.startswith('-')]

for branch in branches:
    rel = (compute_rel(cwd, branch) or '.') + '/'
    rel_paths = []
    for path in paths:
        rel_path = compute_rel(branch, path)
        if rel_path.startswith('..'):
            continue
        rel_paths.append(rel_path)
    args = options + rel_paths


    lines = run_git(branch, 'diff', '--color',
                    '--src-prefix=%s' % rel, '--dst-prefix=%s' % rel, *args)
    for l in lines:
        print l
